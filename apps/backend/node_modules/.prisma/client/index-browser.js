
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  avatar: 'avatar',
  isEmailVerified: 'isEmailVerified',
  isPhoneVerified: 'isPhoneVerified',
  emailVerificationToken: 'emailVerificationToken',
  phoneVerificationToken: 'phoneVerificationToken',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordExpires: 'resetPasswordExpires',
  lastLoginAt: 'lastLoginAt',
  isActive: 'isActive',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  logo: 'logo',
  favicon: 'favicon',
  domain: 'domain',
  subdomain: 'subdomain',
  customDomain: 'customDomain',
  isActive: 'isActive',
  isPublished: 'isPublished',
  plan: 'plan',
  currency: 'currency',
  timezone: 'timezone',
  language: 'language',
  settings: 'settings',
  theme: 'theme',
  seoSettings: 'seoSettings',
  analyticsSettings: 'analyticsSettings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId'
};

exports.Prisma.StaffMemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  role: 'role',
  permissions: 'permissions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  title: 'title',
  description: 'description',
  shortDescription: 'shortDescription',
  handle: 'handle',
  sku: 'sku',
  barcode: 'barcode',
  type: 'type',
  status: 'status',
  isPublished: 'isPublished',
  isFeatured: 'isFeatured',
  isDigital: 'isDigital',
  weight: 'weight',
  weightUnit: 'weightUnit',
  dimensions: 'dimensions',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  seoKeywords: 'seoKeywords',
  tags: 'tags',
  vendor: 'vendor',
  vendorId: 'vendorId',
  costPrice: 'costPrice',
  compareAtPrice: 'compareAtPrice',
  price: 'price',
  inventoryQuantity: 'inventoryQuantity',
  inventoryPolicy: 'inventoryPolicy',
  inventoryTracking: 'inventoryTracking',
  lowStockThreshold: 'lowStockThreshold',
  requiresShipping: 'requiresShipping',
  taxable: 'taxable',
  taxCode: 'taxCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  title: 'title',
  sku: 'sku',
  barcode: 'barcode',
  price: 'price',
  compareAtPrice: 'compareAtPrice',
  costPrice: 'costPrice',
  inventoryQuantity: 'inventoryQuantity',
  inventoryPolicy: 'inventoryPolicy',
  weight: 'weight',
  weightUnit: 'weightUnit',
  dimensions: 'dimensions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductVariantOptionScalarFieldEnum = {
  id: 'id',
  variantId: 'variantId',
  optionId: 'optionId',
  value: 'value'
};

exports.Prisma.ProductOptionScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  name: 'name',
  position: 'position',
  values: 'values'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  url: 'url',
  alt: 'alt',
  position: 'position',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt'
};

exports.Prisma.CollectionScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  title: 'title',
  description: 'description',
  handle: 'handle',
  image: 'image',
  isPublished: 'isPublished',
  isFeatured: 'isFeatured',
  sortOrder: 'sortOrder',
  conditions: 'conditions',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  seoKeywords: 'seoKeywords',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductCollectionScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  collectionId: 'collectionId',
  position: 'position',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  company: 'company',
  notes: 'notes',
  tags: 'tags',
  acceptsMarketing: 'acceptsMarketing',
  isVerified: 'isVerified',
  totalSpent: 'totalSpent',
  ordersCount: 'ordersCount',
  lastOrderAt: 'lastOrderAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerAddressScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  type: 'type',
  firstName: 'firstName',
  lastName: 'lastName',
  company: 'company',
  address1: 'address1',
  address2: 'address2',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  phone: 'phone',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  customerId: 'customerId',
  orderNumber: 'orderNumber',
  status: 'status',
  financialStatus: 'financialStatus',
  fulfillmentStatus: 'fulfillmentStatus',
  subtotal: 'subtotal',
  totalTax: 'totalTax',
  totalDiscount: 'totalDiscount',
  totalShipping: 'totalShipping',
  total: 'total',
  currency: 'currency',
  exchangeRate: 'exchangeRate',
  customerEmail: 'customerEmail',
  customerPhone: 'customerPhone',
  customerLocale: 'customerLocale',
  billingAddress: 'billingAddress',
  shippingAddress: 'shippingAddress',
  shippingMethod: 'shippingMethod',
  shippingRate: 'shippingRate',
  trackingNumber: 'trackingNumber',
  trackingCompany: 'trackingCompany',
  trackingUrl: 'trackingUrl',
  note: 'note',
  tags: 'tags',
  cancelledAt: 'cancelledAt',
  cancelledReason: 'cancelledReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  variantId: 'variantId',
  title: 'title',
  sku: 'sku',
  quantity: 'quantity',
  price: 'price',
  totalPrice: 'totalPrice',
  totalDiscount: 'totalDiscount',
  totalTax: 'totalTax',
  properties: 'properties',
  createdAt: 'createdAt'
};

exports.Prisma.FulfillmentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  status: 'status',
  trackingNumber: 'trackingNumber',
  trackingCompany: 'trackingCompany',
  trackingUrl: 'trackingUrl',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FulfillmentItemScalarFieldEnum = {
  id: 'id',
  fulfillmentId: 'fulfillmentId',
  orderItemId: 'orderItemId',
  quantity: 'quantity'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  type: 'type',
  status: 'status',
  amount: 'amount',
  currency: 'currency',
  gateway: 'gateway',
  gatewayTransactionId: 'gatewayTransactionId',
  gatewayResponse: 'gatewayResponse',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefundScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  amount: 'amount',
  reason: 'reason',
  gatewayRefundId: 'gatewayRefundId',
  gatewayResponse: 'gatewayResponse',
  processedAt: 'processedAt',
  createdAt: 'createdAt'
};

exports.Prisma.DiscountScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  code: 'code',
  title: 'title',
  description: 'description',
  type: 'type',
  value: 'value',
  minimumAmount: 'minimumAmount',
  maximumAmount: 'maximumAmount',
  usageLimit: 'usageLimit',
  usageCount: 'usageCount',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  isActive: 'isActive',
  appliesTo: 'appliesTo',
  productIds: 'productIds',
  collectionIds: 'collectionIds',
  customerIds: 'customerIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderDiscountScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  discountId: 'discountId',
  amount: 'amount'
};

exports.Prisma.GiftCardScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  code: 'code',
  balance: 'balance',
  initialBalance: 'initialBalance',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingZoneScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  name: 'name',
  countries: 'countries',
  provinces: 'provinces',
  zipCodes: 'zipCodes',
  weightLow: 'weightLow',
  weightHigh: 'weightHigh',
  price: 'price',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  name: 'name',
  type: 'type',
  isActive: 'isActive',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  title: 'title',
  handle: 'handle',
  description: 'description',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  isPublished: 'isPublished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ArticleScalarFieldEnum = {
  id: 'id',
  blogId: 'blogId',
  title: 'title',
  handle: 'handle',
  content: 'content',
  excerpt: 'excerpt',
  featuredImage: 'featuredImage',
  author: 'author',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  seoKeywords: 'seoKeywords',
  tags: 'tags',
  isPublished: 'isPublished',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PageScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  title: 'title',
  handle: 'handle',
  content: 'content',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  seoKeywords: 'seoKeywords',
  isPublished: 'isPublished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  productId: 'productId',
  name: 'name',
  url: 'url',
  size: 'size',
  mimeType: 'mimeType',
  alt: 'alt',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  customerId: 'customerId',
  rating: 'rating',
  title: 'title',
  content: 'content',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WishlistItemScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  productId: 'productId',
  createdAt: 'createdAt'
};

exports.Prisma.AppScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  name: 'name',
  type: 'type',
  isActive: 'isActive',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  url: 'url',
  events: 'events',
  isActive: 'isActive',
  secret: 'secret',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  key: 'key',
  permissions: 'permissions',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  CUSTOMER: 'CUSTOMER',
  STAFF: 'STAFF'
};

exports.StorePlan = exports.$Enums.StorePlan = {
  STARTER: 'STARTER',
  BASIC: 'BASIC',
  PRO: 'PRO',
  ADVANCED: 'ADVANCED',
  ENTERPRISE: 'ENTERPRISE'
};

exports.StaffRole = exports.$Enums.StaffRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF'
};

exports.ProductType = exports.$Enums.ProductType = {
  PHYSICAL: 'PHYSICAL',
  DIGITAL: 'DIGITAL',
  SERVICE: 'SERVICE',
  GIFT_CARD: 'GIFT_CARD'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED'
};

exports.WeightUnit = exports.$Enums.WeightUnit = {
  KG: 'KG',
  LB: 'LB',
  G: 'G',
  OZ: 'OZ'
};

exports.InventoryPolicy = exports.$Enums.InventoryPolicy = {
  DENY: 'DENY',
  CONTINUE: 'CONTINUE'
};

exports.InventoryTracking = exports.$Enums.InventoryTracking = {
  SKU: 'SKU',
  SHOP: 'SHOP',
  NONE: 'NONE'
};

exports.CollectionSortOrder = exports.$Enums.CollectionSortOrder = {
  MANUAL: 'MANUAL',
  ALPHA_ASC: 'ALPHA_ASC',
  ALPHA_DESC: 'ALPHA_DESC',
  BEST_SELLING: 'BEST_SELLING',
  CREATED_ASC: 'CREATED_ASC',
  CREATED_DESC: 'CREATED_DESC',
  PRICE_ASC: 'PRICE_ASC',
  PRICE_DESC: 'PRICE_DESC'
};

exports.AddressType = exports.$Enums.AddressType = {
  SHIPPING: 'SHIPPING',
  BILLING: 'BILLING'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.FinancialStatus = exports.$Enums.FinancialStatus = {
  PENDING: 'PENDING',
  AUTHORIZED: 'AUTHORIZED',
  PAID: 'PAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  PARTIALLY_REFUNDED: 'PARTIALLY_REFUNDED',
  REFUNDED: 'REFUNDED',
  VOIDED: 'VOIDED'
};

exports.FulfillmentStatus = exports.$Enums.FulfillmentStatus = {
  PENDING: 'PENDING',
  UNFULFILLED: 'UNFULFILLED',
  PARTIALLY_FULFILLED: 'PARTIALLY_FULFILLED',
  FULFILLED: 'FULFILLED',
  RESTOCKED: 'RESTOCKED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  AUTHORIZATION: 'AUTHORIZATION',
  CAPTURE: 'CAPTURE',
  SALE: 'SALE',
  VOID: 'VOID',
  REFUND: 'REFUND'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED_AMOUNT: 'FIXED_AMOUNT',
  FREE_SHIPPING: 'FREE_SHIPPING'
};

exports.DiscountAppliesTo = exports.$Enums.DiscountAppliesTo = {
  ENTIRE_ORDER: 'ENTIRE_ORDER',
  SPECIFIC_PRODUCTS: 'SPECIFIC_PRODUCTS',
  SPECIFIC_COLLECTIONS: 'SPECIFIC_COLLECTIONS'
};

exports.PaymentMethodType = exports.$Enums.PaymentMethodType = {
  CREDIT_CARD: 'CREDIT_CARD',
  PAYPAL: 'PAYPAL',
  APPLE_PAY: 'APPLE_PAY',
  GOOGLE_PAY: 'GOOGLE_PAY',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CASH_ON_DELIVERY: 'CASH_ON_DELIVERY'
};

exports.AppType = exports.$Enums.AppType = {
  PAYMENT: 'PAYMENT',
  SHIPPING: 'SHIPPING',
  MARKETING: 'MARKETING',
  ANALYTICS: 'ANALYTICS',
  CUSTOM: 'CUSTOM'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  ORDER: 'ORDER',
  INVENTORY: 'INVENTORY',
  CUSTOMER: 'CUSTOMER',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Store: 'Store',
  StaffMember: 'StaffMember',
  Product: 'Product',
  ProductVariant: 'ProductVariant',
  ProductVariantOption: 'ProductVariantOption',
  ProductOption: 'ProductOption',
  ProductImage: 'ProductImage',
  Collection: 'Collection',
  ProductCollection: 'ProductCollection',
  Customer: 'Customer',
  CustomerAddress: 'CustomerAddress',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Fulfillment: 'Fulfillment',
  FulfillmentItem: 'FulfillmentItem',
  Transaction: 'Transaction',
  Refund: 'Refund',
  Discount: 'Discount',
  OrderDiscount: 'OrderDiscount',
  GiftCard: 'GiftCard',
  ShippingZone: 'ShippingZone',
  PaymentMethod: 'PaymentMethod',
  Blog: 'Blog',
  Article: 'Article',
  Page: 'Page',
  File: 'File',
  Review: 'Review',
  WishlistItem: 'WishlistItem',
  App: 'App',
  Webhook: 'Webhook',
  ApiKey: 'ApiKey',
  Notification: 'Notification',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
