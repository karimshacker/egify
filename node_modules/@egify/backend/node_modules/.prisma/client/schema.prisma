// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// USER & AUTHENTICATION MODELS
// =============================================================================

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  password               String?
  firstName              String?
  lastName               String?
  phone                  String?
  avatar                 String?
  isEmailVerified        Boolean   @default(false)
  isPhoneVerified        Boolean   @default(false)
  emailVerificationToken String?
  phoneVerificationToken String?
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  lastLoginAt            DateTime?
  isActive               Boolean   @default(true)
  role                   UserRole  @default(CUSTOMER)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relations
  stores           Store[]
  customerProfile  Customer?
  staffMemberships StaffMember[]
  apiKeys          ApiKey[]
  sessions         Session[]
  notifications    Notification[]
  auditLogs        AuditLog[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// =============================================================================
// STORE & TENANT MODELS
// =============================================================================

model Store {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  description       String?
  logo              String?
  favicon           String?
  domain            String?   @unique
  subdomain         String?   @unique
  customDomain      String?   @unique
  isActive          Boolean   @default(true)
  isPublished       Boolean   @default(false)
  plan              StorePlan @default(STARTER)
  currency          String    @default("USD")
  timezone          String    @default("UTC")
  language          String    @default("en")
  settings          Json      @default("{}")
  theme             Json      @default("{}")
  seoSettings       Json      @default("{}")
  analyticsSettings Json      @default("{}")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  ownerId        String
  owner          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  staffMembers   StaffMember[]
  products       Product[]
  collections    Collection[]
  orders         Order[]
  customers      Customer[]
  discounts      Discount[]
  giftCards      GiftCard[]
  shippingZones  ShippingZone[]
  paymentMethods PaymentMethod[]
  webhooks       Webhook[]
  apps           App[]
  blogs          Blog[]
  pages          Page[]
  files          File[]
  notifications  Notification[]
  auditLogs      AuditLog[]

  @@map("stores")
}

model StaffMember {
  id          String    @id @default(cuid())
  userId      String
  storeId     String
  role        StaffRole @default(STAFF)
  permissions Json      @default("[]")
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
  @@map("staff_members")
}

// =============================================================================
// PRODUCT & INVENTORY MODELS
// =============================================================================

model Product {
  id                String            @id @default(cuid())
  storeId           String
  title             String
  description       String?
  shortDescription  String?
  handle            String
  sku               String?
  barcode           String?
  type              ProductType       @default(PHYSICAL)
  status            ProductStatus     @default(DRAFT)
  isPublished       Boolean           @default(false)
  isFeatured        Boolean           @default(false)
  isDigital         Boolean           @default(false)
  weight            Float?
  weightUnit        WeightUnit        @default(KG)
  dimensions        Json?
  seoTitle          String?
  seoDescription    String?
  seoKeywords       String[]
  tags              String[]
  vendor            String?
  vendorId          String?
  costPrice         Decimal?          @db.Decimal(10, 2)
  compareAtPrice    Decimal?          @db.Decimal(10, 2)
  price             Decimal           @db.Decimal(10, 2)
  inventoryQuantity Int               @default(0)
  inventoryPolicy   InventoryPolicy   @default(DENY)
  inventoryTracking InventoryTracking @default(SKU)
  lowStockThreshold Int?
  requiresShipping  Boolean           @default(true)
  taxable           Boolean           @default(true)
  taxCode           String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  store       Store               @relation(fields: [storeId], references: [id], onDelete: Cascade)
  images      ProductImage[]
  variants    ProductVariant[]
  options     ProductOption[]
  collections ProductCollection[]
  orderItems  OrderItem[]
  reviews     Review[]
  files       File[]

  @@unique([storeId, handle])
  @@map("products")
}

model ProductVariant {
  id                String          @id @default(cuid())
  productId         String
  title             String
  sku               String?         @unique
  barcode           String?
  price             Decimal         @db.Decimal(10, 2)
  compareAtPrice    Decimal?        @db.Decimal(10, 2)
  costPrice         Decimal?        @db.Decimal(10, 2)
  inventoryQuantity Int             @default(0)
  inventoryPolicy   InventoryPolicy @default(DENY)
  weight            Float?
  weightUnit        WeightUnit      @default(KG)
  dimensions        Json?
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  product    Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  options    ProductVariantOption[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model ProductVariantOption {
  id        String @id @default(cuid())
  variantId String
  optionId  String
  value     String

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  option  ProductOption  @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([variantId, optionId])
  @@map("product_variant_options")
}

model ProductOption {
  id        String   @id @default(cuid())
  productId String
  name      String
  position  Int      @default(0)
  values    String[]

  product  Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants ProductVariantOption[]

  @@map("product_options")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  position  Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Collection {
  id             String              @id @default(cuid())
  storeId        String
  title          String
  description    String?
  handle         String
  image          String?
  isPublished    Boolean             @default(false)
  isFeatured     Boolean             @default(false)
  sortOrder      CollectionSortOrder @default(MANUAL)
  conditions     Json?
  seoTitle       String?
  seoDescription String?
  seoKeywords    String[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // Relations
  store    Store               @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products ProductCollection[]

  @@unique([storeId, handle])
  @@map("collections")
}

model ProductCollection {
  id           String   @id @default(cuid())
  productId    String
  collectionId String
  position     Int      @default(0)
  createdAt    DateTime @default(now())

  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([productId, collectionId])
  @@map("product_collections")
}

// =============================================================================
// CUSTOMER MODELS
// =============================================================================

model Customer {
  id               String    @id @default(cuid())
  userId           String?   @unique
  storeId          String
  email            String
  firstName        String?
  lastName         String?
  phone            String?
  company          String?
  notes            String?
  tags             String[]
  acceptsMarketing Boolean   @default(false)
  isVerified       Boolean   @default(false)
  totalSpent       Decimal   @default(0) @db.Decimal(10, 2)
  ordersCount      Int       @default(0)
  lastOrderAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user      User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  store     Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  addresses CustomerAddress[]
  orders    Order[]
  reviews   Review[]
  wishlist  WishlistItem[]

  @@unique([storeId, email])
  @@map("customers")
}

model CustomerAddress {
  id         String      @id @default(cuid())
  customerId String
  type       AddressType @default(SHIPPING)
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String?
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_addresses")
}

// =============================================================================
// ORDER & FULFILLMENT MODELS
// =============================================================================

model Order {
  id                String            @id @default(cuid())
  storeId           String
  customerId        String?
  orderNumber       String            @unique
  status            OrderStatus       @default(PENDING)
  financialStatus   FinancialStatus   @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)

  subtotal      Decimal @db.Decimal(10, 2)
  totalTax      Decimal @db.Decimal(10, 2)
  totalDiscount Decimal @db.Decimal(10, 2)
  totalShipping Decimal @db.Decimal(10, 2)
  total         Decimal @db.Decimal(10, 2)

  currency     String   @default("USD")
  exchangeRate Decimal? @db.Decimal(10, 6)

  customerEmail  String
  customerPhone  String?
  customerLocale String?

  billingAddress  Json
  shippingAddress Json?

  shippingMethod  String?
  shippingRate    Decimal? @db.Decimal(10, 2)
  trackingNumber  String?
  trackingCompany String?
  trackingUrl     String?

  note String?
  tags String[]

  cancelledAt     DateTime?
  cancelledReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  store        Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  customer     Customer?       @relation(fields: [customerId], references: [id], onDelete: SetNull)
  items        OrderItem[]
  fulfillments Fulfillment[]
  transactions Transaction[]
  refunds      Refund[]
  discounts    OrderDiscount[]

  @@map("orders")
}

model OrderItem {
  id            String   @id @default(cuid())
  orderId       String
  productId     String?
  variantId     String?
  title         String
  sku           String?
  quantity      Int
  price         Decimal  @db.Decimal(10, 2)
  totalPrice    Decimal  @db.Decimal(10, 2)
  totalDiscount Decimal  @db.Decimal(10, 2)
  totalTax      Decimal  @db.Decimal(10, 2)
  properties    Json?
  createdAt     DateTime @default(now())

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product?        @relation(fields: [productId], references: [id], onDelete: SetNull)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("order_items")
}

model Fulfillment {
  id              String            @id @default(cuid())
  orderId         String
  status          FulfillmentStatus @default(PENDING)
  trackingNumber  String?
  trackingCompany String?
  trackingUrl     String?
  note            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  order Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  items FulfillmentItem[]

  @@map("fulfillments")
}

model FulfillmentItem {
  id            String @id @default(cuid())
  fulfillmentId String
  orderItemId   String
  quantity      Int

  fulfillment Fulfillment @relation(fields: [fulfillmentId], references: [id], onDelete: Cascade)

  @@map("fulfillment_items")
}

// =============================================================================
// PAYMENT & TRANSACTION MODELS
// =============================================================================

model Transaction {
  id                   String            @id @default(cuid())
  orderId              String
  type                 TransactionType
  status               TransactionStatus
  amount               Decimal           @db.Decimal(10, 2)
  currency             String            @default("USD")
  gateway              String
  gatewayTransactionId String?
  gatewayResponse      Json?
  processedAt          DateTime?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Refund {
  id              String    @id @default(cuid())
  orderId         String
  amount          Decimal   @db.Decimal(10, 2)
  reason          String?
  gatewayRefundId String?
  gatewayResponse Json?
  processedAt     DateTime?
  createdAt       DateTime  @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

// =============================================================================
// DISCOUNT & MARKETING MODELS
// =============================================================================

model Discount {
  id            String            @id @default(cuid())
  storeId       String
  code          String?           @unique
  title         String
  description   String?
  type          DiscountType
  value         Decimal           @db.Decimal(10, 2)
  minimumAmount Decimal?          @db.Decimal(10, 2)
  maximumAmount Decimal?          @db.Decimal(10, 2)
  usageLimit    Int?
  usageCount    Int               @default(0)
  startsAt      DateTime?
  endsAt        DateTime?
  isActive      Boolean           @default(true)
  appliesTo     DiscountAppliesTo @default(ENTIRE_ORDER)
  productIds    String[]
  collectionIds String[]
  customerIds   String[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  store  Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders OrderDiscount[]

  @@map("discounts")
}

model OrderDiscount {
  id         String  @id @default(cuid())
  orderId    String
  discountId String
  amount     Decimal @db.Decimal(10, 2)

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  discount Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)

  @@unique([orderId, discountId])
  @@map("order_discounts")
}

model GiftCard {
  id             String    @id @default(cuid())
  storeId        String
  code           String    @unique
  balance        Decimal   @db.Decimal(10, 2)
  initialBalance Decimal   @db.Decimal(10, 2)
  expiresAt      DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("gift_cards")
}

// =============================================================================
// SHIPPING MODELS
// =============================================================================

model ShippingZone {
  id         String   @id @default(cuid())
  storeId    String
  name       String
  countries  String[]
  provinces  String[]
  zipCodes   String[]
  weightLow  Float?
  weightHigh Float?
  price      Decimal  @db.Decimal(10, 2)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("shipping_zones")
}

// =============================================================================
// PAYMENT METHODS
// =============================================================================

model PaymentMethod {
  id        String            @id @default(cuid())
  storeId   String
  name      String
  type      PaymentMethodType
  isActive  Boolean           @default(true)
  settings  Json              @default("{}")
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

// =============================================================================
// CONTENT MODELS
// =============================================================================

model Blog {
  id             String   @id @default(cuid())
  storeId        String
  title          String
  handle         String
  description    String?
  seoTitle       String?
  seoDescription String?
  isPublished    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  articles Article[]

  @@unique([storeId, handle])
  @@map("blogs")
}

model Article {
  id             String    @id @default(cuid())
  blogId         String
  title          String
  handle         String
  content        String
  excerpt        String?
  featuredImage  String?
  author         String?
  seoTitle       String?
  seoDescription String?
  seoKeywords    String[]
  tags           String[]
  isPublished    Boolean   @default(false)
  publishedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([blogId, handle])
  @@map("articles")
}

model Page {
  id             String   @id @default(cuid())
  storeId        String
  title          String
  handle         String
  content        String
  seoTitle       String?
  seoDescription String?
  seoKeywords    String[]
  isPublished    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, handle])
  @@map("pages")
}

// =============================================================================
// FILE & MEDIA MODELS
// =============================================================================

model File {
  id        String   @id @default(cuid())
  storeId   String
  productId String?
  name      String
  url       String
  size      Int
  mimeType  String
  alt       String?
  createdAt DateTime @default(now())

  store   Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@map("files")
}

// =============================================================================
// REVIEW & RATING MODELS
// =============================================================================

model Review {
  id         String   @id @default(cuid())
  productId  String
  customerId String
  rating     Int
  title      String?
  content    String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([productId, customerId])
  @@map("reviews")
}

// =============================================================================
// WISHLIST MODELS
// =============================================================================

model WishlistItem {
  id         String   @id @default(cuid())
  customerId String
  productId  String
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, productId])
  @@map("wishlist_items")
}

// =============================================================================
// APP & INTEGRATION MODELS
// =============================================================================

model App {
  id        String   @id @default(cuid())
  storeId   String
  name      String
  type      AppType
  isActive  Boolean  @default(true)
  settings  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("apps")
}

model Webhook {
  id        String   @id @default(cuid())
  storeId   String
  url       String
  events    String[]
  isActive  Boolean  @default(true)
  secret    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String
  name        String
  key         String    @unique
  permissions Json      @default("[]")
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// =============================================================================
// NOTIFICATION & AUDIT MODELS
// =============================================================================

model Notification {
  id        String           @id @default(cuid())
  userId    String?
  storeId   String?
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store? @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  storeId    String?
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user  User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  store Store? @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// =============================================================================
// ENUMS
// =============================================================================

enum UserRole {
  ADMIN
  CUSTOMER
  STAFF
}

enum StaffRole {
  OWNER
  ADMIN
  MANAGER
  STAFF
}

enum StorePlan {
  STARTER
  BASIC
  PRO
  ADVANCED
  ENTERPRISE
}

enum ProductType {
  PHYSICAL
  DIGITAL
  SERVICE
  GIFT_CARD
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum InventoryPolicy {
  DENY
  CONTINUE
}

enum InventoryTracking {
  SKU
  SHOP
  NONE
}

enum WeightUnit {
  KG
  LB
  G
  OZ
}

enum CollectionSortOrder {
  MANUAL
  ALPHA_ASC
  ALPHA_DESC
  BEST_SELLING
  CREATED_ASC
  CREATED_DESC
  PRICE_ASC
  PRICE_DESC
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum FinancialStatus {
  PENDING
  AUTHORIZED
  PAID
  PARTIALLY_PAID
  PARTIALLY_REFUNDED
  REFUNDED
  VOIDED
}

enum FulfillmentStatus {
  PENDING
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RESTOCKED
}

enum TransactionType {
  AUTHORIZATION
  CAPTURE
  SALE
  VOID
  REFUND
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum DiscountAppliesTo {
  ENTIRE_ORDER
  SPECIFIC_PRODUCTS
  SPECIFIC_COLLECTIONS
}

enum PaymentMethodType {
  CREDIT_CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum AppType {
  PAYMENT
  SHIPPING
  MARKETING
  ANALYTICS
  CUSTOM
}

enum NotificationType {
  ORDER
  INVENTORY
  CUSTOMER
  SYSTEM
}
